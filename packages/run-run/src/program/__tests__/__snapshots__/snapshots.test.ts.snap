// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`should match command: "help" 1`] = `
"ü¶ä R U N - R U N: The CLI toolbox to fullstack common scripts in Variable Land üëä

Usage: rr|run-run [options] [command]

Options:
  -v, --version          output the version number
  -h, --help             display help for command

Commands:
  format|fmt [options]   format the code üé®
  lint [options]         lint the code üßπ
  test:static [options]  check format and lint issues ‚úÖ
  clean [options]        delete dirty folders or files such as node_modules, etc
                         üóëÔ∏è
  typecheck|tsc          check if TypeScript code is well typed üé®
  info:pkg [options]     display run-run package.json ‚ÑπÔ∏è
  help [command]         display help for command

Acknowledgment:
- kcd-scripts: for main inspiration
  https://github.com/kentcdodds/kcd-scripts

- peruvian news: in honor to Run Run
  https://es.wikipedia.org/wiki/Run_Run
"
`;

exports[`should match command: "--help" 1`] = `
"ü¶ä R U N - R U N: The CLI toolbox to fullstack common scripts in Variable Land üëä

Usage: rr|run-run [options] [command]

Options:
  -v, --version          output the version number
  -h, --help             display help for command

Commands:
  format|fmt [options]   format the code üé®
  lint [options]         lint the code üßπ
  test:static [options]  check format and lint issues ‚úÖ
  clean [options]        delete dirty folders or files such as node_modules, etc
                         üóëÔ∏è
  typecheck|tsc          check if TypeScript code is well typed üé®
  info:pkg [options]     display run-run package.json ‚ÑπÔ∏è
  help [command]         display help for command

Acknowledgment:
- kcd-scripts: for main inspiration
  https://github.com/kentcdodds/kcd-scripts

- peruvian news: in honor to Run Run
  https://es.wikipedia.org/wiki/Run_Run
"
`;

exports[`should match command: "--version" 1`] = `
"0.0.0-test
"
`;

exports[`should match command: "-v" 1`] = `
"0.0.0-test
"
`;

exports[`should match help message for command "format" 1`] = `
"Usage: rr format|fmt [options]

format the code üé®

Options:
  -c, --check  check if the code is formatted (default: true)
  -f, --fix    format all the code
  -h, --help   display help for command

Under the hood, this command uses the biome CLI to format the code.
"
`;

exports[`should match help message for command "lint" 1`] = `
"Usage: rr lint [options]

lint the code üßπ

Options:
  -c, --check  check if the code is valid (default: true)
  -f, --fix    try to fix all the code
  -h, --help   display help for command

Under the hood, this command uses the biome CLI to lint the code.
"
`;

exports[`should match help message for command "test:static" 1`] = `
"Usage: rr test:static [options]

check format and lint issues ‚úÖ

Options:
  -f, --fix     try to fix issues automatically
  --fix-staged  try to fix staged files only
  -h, --help    display help for command

Under the hood, this command uses the biome CLI to check the code.
"
`;

exports[`should match help message for command "clean" 1`] = `
"Usage: rr clean [options]

delete dirty folders or files such as node_modules, etc üóëÔ∏è

Options:
  --only-dist  delete 'dist' folders only
  --dry-run    outputs the paths that would be deleted
  -h, --help   display help for command

Under the hood, this command uses the rimraf.js to delete dirty folders or files.
"
`;

exports[`should match help message for command "typecheck" 1`] = `
"Usage: rr typecheck|tsc [options]

check if TypeScript code is well typed üé®

Options:
  -h, --help  display help for command

Under the hood, this command uses the TypeScript CLI to check the code.
"
`;

exports[`should match help message for command "info:pkg" 1`] = `
"Usage: rr info:pkg [options]

display run-run package.json ‚ÑπÔ∏è

Options:
  -f, --filter <filter>  lodash get id like to filter info by
  -c, --current          display package.json where run-run will be executed
  -h, --help             display help for command
"
`;

exports[`should match "format" command 1`] = `"biome format --no-errors-on-unmatched --colors=force"`;

exports[`should match "lint" command 1`] = `"biome check --colors=force --formatter-enabled=false"`;

exports[`should match "test:static" command 1`] = `"biome check --colors=force"`;

exports[`should match "typecheck" command 1`] = `"tsc --noEmit"`;

exports[`should match help message for command "biome" 1`] = `
"Biome official CLI. Use it to check the health of your project or run it to check single files.

Usage: biome COMMAND ...

Available options:
    -h, --help     Prints help information
    -V, --version  Prints version information

Available commands:
    version        Shows the Biome version information and quit.
    rage           Prints information for debugging.
    start          Starts the Biome daemon server process.
    stop           Stops the Biome daemon server process.
    check          Runs formatter, linter and import sorting to the requested files.
    lint           Run various checks on a set of files.
    format         Run the formatter on a set of files.
    ci             Command to use in CI environments. Runs formatter, linter and import sorting to
                   the requested files.
    init           Bootstraps a new biome project. Creates a configuration file with some defaults.
    lsp-proxy      Acts as a server for the Language Server Protocol over stdin/stdout.
    migrate        Updates the configuration when there are breaking changes.
    search         EXPERIMENTAL: Searches for Grit patterns across a project.
    explain        Shows documentation of various aspects of the CLI.
    clean          Cleans the logs emitted by the daemon.

"
`;

exports[`should match "biome" command 1`] = `"biome "`;
